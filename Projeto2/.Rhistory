train2$id <- NULL
test2$id <- NULL
modelo_svm_v2 <- svm(STATUS ~ .,data = train2,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v2, test2)
mean(pred_test == test2$STATUS)
table(pred_test, test2$STATUS)
modelo_rf_v2 = rpart(STATUS ~ ., data = train2, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v2, test2, type='class')
mean(tree_pred==test2$STATUS)
table(tree_pred, test2$STATUS)
modelo_nb_v2 <- naiveBayes(STATUS ~ ., data = train2)
y_pred <- predict(modelo_nb_v2, newdata = test2)
mean(y_pred==test2$STATUS)
table(y_pred, test2$STATUS)
dados_z <- as.data.frame(scale(dadosLiquidFuels[-c(2,7)]))
dados_z = cbind(dados_z,dadosLiquidFuels[c(2,7)])
dados_z$id <- 1:nrow(dados_z)
set.seed(1)
train3 <- dados_z %>% dplyr::sample_frac(0.7)
test3 <- dplyr::anti_join(dados_z, train3, by = 'id')
train3$id <- NULL
test3$id <- NULL
modelo_svm_v3 <- svm(STATUS ~ .,data = train3,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v3, test3)
mean(pred_test == test3$STATUS)
table(pred_test, test3$STATUS)
modelo_rf_v3 = rpart(STATUS ~ ., data = train3, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v3, test3, type='class')
mean(tree_pred==test3$STATUS)
table(tree_pred, test3$STATUS)
modelo_nb_v3 <- naiveBayes(STATUS ~ ., data = train3)
y_pred <- predict(modelo_nb_v3, newdata = test3)
mean(y_pred==test3$STATUS)
table(y_pred, test3$STATUS)
table(dadosLiquidFuels$STATUS)
modelo_svm_v1.1 <- svm(STATUS ~ .,data = train1,type = 'C-classification',kernel = 'linear')
pred_test <- predict(modelo_svm_v1.1, test1)
mean(pred_test == test1$STATUS)
table(pred_test, test1$STATUS)
modelo_svm_v1.1 <- svm(STATUS ~ .,data = train1,type = 'C-classification',kernel = 'polynomial')
pred_test <- predict(modelo_svm_v1.1, test1)
mean(pred_test == test1$STATUS)
table(pred_test, test1$STATUS)
modelo_svm_v1.1 <- svm(STATUS ~ .,data = train1,type = 'C-classification',kernel = 'sigmoid')
pred_test <- predict(modelo_svm_v1.1, test1)
mean(pred_test == test1$STATUS)
table(pred_test, test1$STATUS)
modelo_svm_v1.1 <- svm(STATUS ~ .,data = train1,type = 'one-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.1, test1)
mean(pred_test == test1$STATUS)
table(pred_test, test1$STATUS)
modelo_rf_v1.1 = rpart(STATUS ~ ., data = train1, control = rpart.control(cp = .005))
tree_pred = predict(modelo_rf_v1.1, test1, type='class')
mean(tree_pred==test1$STATUS)
table(tree_pred, test1$STATUS)
modelo_rf_v1.1 = rpart(STATUS ~ ., data = train1, control = rpart.control(cp = .00005))
tree_pred = predict(modelo_rf_v1.1, test1, type='class')
mean(tree_pred==test1$STATUS)
table(tree_pred, test1$STATUS)
dadosDesbalanciados = dadosLiquidFuels[dadosLiquidFuels$STATUS == "Falha",]
auxiliar = dadosLiquidFuels[dadosLiquidFuels$STATUS == "Sucesso",]
auxiliar <- auxiliar %>% dplyr::sample_frac(0.9)
dadosDesbalanciados = rbind(dadosDesbalanciados,auxiliar)
dadosDesbalanciados = dadosLiquidFuels[dadosLiquidFuels$STATUS == "Falha",]
auxiliar = dadosLiquidFuels[dadosLiquidFuels$STATUS == "Sucesso",]
auxiliar <- auxiliar %>% dplyr::sample_frac(0.9)
dadosDesbalanciados = rbind(dadosDesbalanciados,auxiliar)
dadosDesbalanciados$id <- 1:nrow(dadosDesbalanciados)
set.seed(1)
train1.1 <- dadosDesbalanciados %>% dplyr::sample_frac(0.7)
test1.1  <- dplyr::anti_join(dadosDesbalanciados, train1.1, by = 'id')
train1.1$id <- NULL
test1.1$id <- NULL
modelo_svm_v1.1 <- svm(STATUS ~ .,data = train1.1,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.1, test1.1)
mean(pred_test == test1.1$STATUS)
table(pred_test, test1.1$STATUS)
modelo_rf_v1.1 = rpart(STATUS ~ ., data = train1.1, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.1, test1.1, type='class')
mean(tree_pred==test1.1$STATUS)
table(tree_pred, test1.1$STATUS)
FPR <- function(x) {
return (x[1,2]/ (x[1,2] + x[2,2]))
}
pred_test <- predict(modelo_svm_v1, test1)
tree_pred = predict(modelo_rf_v1, test1, type='class')
FPR(table(pred_test, test1$STATUS))
FPR(table(tree_pred, test1$STATUS))
train1.2 <- dadosLiquidFuels %>% dplyr::sample_frac(0.65)
test1.2 <- dplyr::anti_join(dadosLiquidFuels, train1.2, by = 'id')
train1.2$id <- NULL
test1.2$id <- NULL
modelo_svm_v1.2 <- svm(STATUS ~ .,data = train1.2,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.2, test1.2)
mean(pred_test == test1.2$STATUS)
FPR(table(pred_test, test1.2$STATUS))
modelo_rf_v1.2 = rpart(STATUS ~ ., data = train1.2, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.2, test1.2, type='class')
mean(tree_pred==test1.2$STATUS)
FPR(table(tree_pred, test1.2$STATUS))
train1.2 <- dadosLiquidFuels %>% dplyr::sample_frac(0.65)
test1.2 <- dplyr::anti_join(dadosLiquidFuels, train1.2, by = 'id')
dadosLiquidFuels$id <- 1:nrow(dadosLiquidFuels)
set.seed(1)
train1.2 <- dadosLiquidFuels %>% dplyr::sample_frac(0.65)
test1.2 <- dplyr::anti_join(dadosLiquidFuels, train1.2, by = 'id')
train1.2$id <- NULL
test1.2$id <- NULL
modelo_svm_v1.2 <- svm(STATUS ~ .,data = train1.2,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.2, test1.2)
mean(pred_test == test1.2$STATUS)
FPR(table(pred_test, test1.2$STATUS))
modelo_rf_v1.2 = rpart(STATUS ~ ., data = train1.2, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.2, test1.2, type='class')
mean(tree_pred==test1.2$STATUS)
FPR(table(tree_pred, test1.2$STATUS))
set.seed(1)
train1.5 <- dadosLiquidFuels %>% dplyr::sample_frac(0.85)
test1.5 <- dplyr::anti_join(dadosLiquidFuels, train1.5, by = 'id')
train1.5$id <- NULL
test1.5$id <- NULL
modelo_svm_v1.5 <- svm(STATUS ~ .,data = train1.5,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.5, test1.5)
mean(pred_test == test1.5$STATUS)
FPR(table(pred_test, test1.5$STATUS))
modelo_rf_v1.5 = rpart(STATUS ~ ., data = train1.5, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.5, test1.5, type='class')
mean(tree_pred==test1.5$STATUS)
FPR(table(tree_pred, test1.5$STATUS))
set.seed(1)
train1.3 <- dadosLiquidFuels %>% dplyr::sample_frac(0.75)
test1.3 <- dplyr::anti_join(dadosLiquidFuels, train1.3, by = 'id')
train1.3$id <- NULL
test1.3$id <- NULL
modelo_svm_v1.3 <- svm(STATUS ~ .,data = train1.3,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.3, test1.3)
mean(pred_test == test1.3$STATUS)
FPR(table(pred_test, test1.3$STATUS))
modelo_rf_v1.3 = rpart(STATUS ~ ., data = train1.3, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.3, test1.3, type='class')
mean(tree_pred==test1.3$STATUS)
FPR(table(tree_pred, test1.3$STATUS))
set.seed(1)
train1.4 <- dadosLiquidFuels %>% dplyr::sample_frac(0.8)
test1.4 <- dplyr::anti_join(dadosLiquidFuels, train1.4, by = 'id')
train1.4$id <- NULL
test1.4$id <- NULL
modelo_svm_v1.4 <- svm(STATUS ~ .,data = train1.4,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.4, test1.4)
mean(pred_test == test1.4$STATUS)
FPR(table(pred_test, test1.4$STATUS))
modelo_rf_v1.4 = rpart(STATUS ~ ., data = train1.4, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.4, test1.4, type='class')
mean(tree_pred==test1.4$STATUS)
FPR(table(tree_pred, test1.4$STATUS))
set.seed(1)
train1.5 <- dadosLiquidFuels %>% dplyr::sample_frac(0.85)
test1.5 <- dplyr::anti_join(dadosLiquidFuels, train1.5, by = 'id')
train1.5$id <- NULL
test1.5$id <- NULL
modelo_svm_v1.5 <- svm(STATUS ~ .,data = train1.5,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.5, test1.5)
mean(pred_test == test1.5$STATUS)
FPR(table(pred_test, test1.5$STATUS))
modelo_rf_v1.5 = rpart(STATUS ~ ., data = train1.5, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.5, test1.5, type='class')
mean(tree_pred==test1.5$STATUS)
FPR(table(tree_pred, test1.5$STATUS))
dadosLiquidFuels$id <- NULL
####
#### Neste caso eu encerro as atividades apresentando o modelo de Random Forest1
summary(modelo_rf_v1)
dadosLpg["SIZE"][dadosLpg["SIZE"] == "6"] <- "Half"
dadosLpg["SIZE"][dadosLpg["SIZE"] == "7"] <- "Full"
dadosLpg["STATUS"][dadosLpg["STATUS"] == 0] <- "Falha"
dadosLpg["STATUS"][dadosLpg["STATUS"] == 1] <- "Sucesso"
dadosLpg$FUEL = NULL
dadosLpg <- dadosLpg %>%
mutate(SIZE = as.factor(SIZE)) %>%
mutate(AIRFLOW = as.numeric(gsub(",", ".",AIRFLOW)))%>%
mutate(STATUS = as.factor(STATUS))
boxplot(dadosLpg$DISTANCE)
boxplot(dadosLpg$DESIBEL)
boxplot(dadosLpg$FREQUENCY)
table(dadosLpg$SIZE)
table(dadosLpg$STATUS)
dadosLpg$id <- 1:nrow(dadosLpg)
set.seed(1)
trainlpg <- dadosLpg %>% dplyr::sample_frac(0.7)
testlpg  <- dplyr::anti_join(dadosLpg, trainlpg, by = 'id')
trainlpg$id <- NULL
testlpg$id <- NULL
dadosLpg$id <- NULL
modelo_svm_lpg_v1 <- svm(STATUS ~ .,data = trainlpg,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_lpg_v1, testlpg)
mean(pred_test == testlpg$STATUS)
table(pred_test, testlpg$STATUS)
modelo_rf_lpg_v1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_lpg_v1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
table(tree_pred, testlpg$STATUS)
modelo_nb_lpg_v1 <- naiveBayes(STATUS ~ ., data = trainlpg)
y_pred <- predict(modelo_nb_lpg_v1, newdata = testlpg)
mean(y_pred==testlpg$STATUS)
table(y_pred, testlpg$STATUS)
dadosLpg$id <- 1:nrow(dadosLpg)
set.seed(1)
trainlpg <- dadosLpg %>% dplyr::sample_frac(0.7)
testlpg  <- dplyr::anti_join(dadosLpg, trainlpg, by = 'id')
trainlpg$id <- NULL
testlpg$id <- NULL
dadosLpg$id <- NULL
modelo_svm_lpg_v1 <- svm(STATUS ~ .,data = trainlpg,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_lpg_v1, testlpg)
mean(pred_test == testlpg$STATUS)
FPR(table(pred_test, testlpg$STATUS))
modelo_rf_lpg_v1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_lpg_v1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
modelo_nb_lpg_v1 <- naiveBayes(STATUS ~ ., data = trainlpg)
y_pred <- predict(modelo_nb_lpg_v1, newdata = testlpg)
mean(y_pred==testlpg$STATUS)
FPR(table(y_pred, testlpg$STATUS))
#### SVM = (0.9237013 & 0.06508876) / RandomForest = (0.9366883 & 0.03846154) / NaiveBayes = (0.8522727 & 0.1893491)
str(dadosLpg)
dados_lpg_norm <- as.data.frame(lapply(dadosLpg[-c(1,6)], normalizar))
dados_lpg_norm = cbind(dados_lpg_norm,dadosLpg[c(1,6)])
dados_lpg_norm$id <- 1:nrow(dados_lpg_norm)
trainlpg2 <- dados_lpg_norm %>% dplyr::sample_frac(0.7)
testlpg2 <- dplyr::anti_join(dados_lpg_norm, trainlpg2, by = 'id')
trainlpg2$id <- NULL
testlpg2$id <- NULL
modelo_svm_lpg_v2 <- svm(STATUS ~ .,data = trainlpg2,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_lpg_v2, testlpg2)
mean(pred_test == testlpg2$STATUS)
FPR(table(pred_test, testlpg2$STATUS))
modelo_rf_lpg_v2 = rpart(STATUS ~ ., data = trainlpg2, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_lpg_v2, testlpg2, type='class')
mean(tree_pred==testlpg2$STATUS)
FPR(table(tree_pred, testlpg2$STATUS))
modelo_nb_lpg_v2 <- naiveBayes(STATUS ~ ., data = trainlpg2)
y_pred <- predict(modelo_nb_lpg_v2, newdata = testlpg2)
mean(y_pred==testlpg2$STATUS)
FPR(table(y_pred, testlpg2$STATUS))
dados_lpg_norm <- as.data.frame(lapply(dadosLpg[-c(1,6)], normalizar))
dados_lpg_norm = cbind(dados_lpg_norm,dadosLpg[c(1,6)])
dados_lpg_norm$id <- 1:nrow(dados_lpg_norm)
set.seed(1)
trainlpg2 <- dados_lpg_norm %>% dplyr::sample_frac(0.7)
testlpg2 <- dplyr::anti_join(dados_lpg_norm, trainlpg2, by = 'id')
trainlpg2$id <- NULL
testlpg2$id <- NULL
modelo_svm_lpg_v2 <- svm(STATUS ~ .,data = trainlpg2,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_lpg_v2, testlpg2)
mean(pred_test == testlpg2$STATUS)
FPR(table(pred_test, testlpg2$STATUS))
modelo_rf_lpg_v2 = rpart(STATUS ~ ., data = trainlpg2, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_lpg_v2, testlpg2, type='class')
mean(tree_pred==testlpg2$STATUS)
FPR(table(tree_pred, testlpg2$STATUS))
modelo_nb_lpg_v2 <- naiveBayes(STATUS ~ ., data = trainlpg2)
y_pred <- predict(modelo_nb_lpg_v2, newdata = testlpg2)
mean(y_pred==testlpg2$STATUS)
FPR(table(y_pred, testlpg2$STATUS))
dados_lpg_z <- as.data.frame(scale(dadosLpg[-c(1,6)]))
dados_lpg_z = cbind(dados_lpg_z,dadosLpg[c(1,6)])
dados_lpg_z$id <- 1:nrow(dados_lpg_z)
set.seed(1)
train3 <- dados_lpg_z %>% dplyr::sample_frac(0.7)
test3 <- dplyr::anti_join(dados_lpg_z, train3, by = 'id')
train3$id <- NULL
test3$id <- NULL
modelo_svm_v3 <- svm(STATUS ~ .,data = train3,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v3, test3)
mean(pred_test == test3$STATUS)
table(pred_test, test3$STATUS)
modelo_rf_v3 = rpart(STATUS ~ ., data = train3, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v3, test3, type='class')
mean(tree_pred==test3$STATUS)
table(tree_pred, test3$STATUS)
modelo_nb_v3 <- naiveBayes(STATUS ~ ., data = train3)
y_pred <- predict(modelo_nb_v3, newdata = test3)
mean(y_pred==test3$STATUS)
table(y_pred, test3$STATUS)
dados_lpg_z <- as.data.frame(scale(dadosLpg[-c(1,6)]))
dados_lpg_z = cbind(dados_lpg_z,dadosLpg[c(1,6)])
dados_lpg_z$id <- 1:nrow(dados_lpg_z)
set.seed(1)
train3 <- dados_lpg_z %>% dplyr::sample_frac(0.7)
test3 <- dplyr::anti_join(dados_lpg_z, train3, by = 'id')
train3$id <- NULL
test3$id <- NULL
modelo_svm_v3 <- svm(STATUS ~ .,data = train3,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v3, test3)
mean(pred_test == test3$STATUS)
FPR(table(pred_test, test3$STATUS))
modelo_rf_v3 = rpart(STATUS ~ ., data = train3, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v3, test3, type='class')
mean(tree_pred==test3$STATUS)
FPR(table(tree_pred, test3$STATUS))
modelo_nb_v3 <- naiveBayes(STATUS ~ ., data = train3)
y_pred <- predict(modelo_nb_v3, newdata = test3)
mean(y_pred==test3$STATUS)
FPR(table(y_pred, test3$STATUS))
modelo_rf_v1.1 = rpart(STATUS ~ ., data = train1, control = rpart.control(cp = .005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
dados_lpg_z <- as.data.frame(scale(dadosLpg[-c(1,6)]))
dados_lpg_z = cbind(dados_lpg_z,dadosLpg[c(1,6)])
dados_lpg_z$id <- 1:nrow(dados_lpg_z)
set.seed(1)
trainlpg3 <- dados_lpg_z %>% dplyr::sample_frac(0.7)
testlpg3 <- dplyr::anti_join(dados_lpg_z, trainlpg3, by = 'id')
trainlpg3$id <- NULL
testlpg3$id <- NULL
modelo_svm_lpg_v3 <- svm(STATUS ~ .,data = trainlpg3,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_lpg_v3, testlpg3)
mean(pred_test == testlpg3$STATUS)
FPR(table(pred_test, testlpg3$STATUS))
modelo_rf_lpg_v3 = rpart(STATUS ~ ., data = trainlpg3, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_lpg_v3, testlpg3, type='class')
mean(tree_pred==testlpg3$STATUS)
FPR(table(tree_pred, testlpg3$STATUS))
modelo_nb_lpg_v3 <- naiveBayes(STATUS ~ ., data = trainlpg3)
y_pred <- predict(modelo_nb_lpg_v3, newdata = testlpg3)
mean(y_pred==testlpg3$STATUS)
FPR(table(y_pred, testlpg3$STATUS))
modelo_rf_lpg_v1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
modelo_rf_lpg_v1.1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
dadosLpg$id <- 1:nrow(dadosLpg)
set.seed(1)
trainlpg <- dadosLpg %>% dplyr::sample_frac(0.7)
testlpg  <- dplyr::anti_join(dadosLpg, trainlpg, by = 'id')
trainlpg$id <- NULL
testlpg$id <- NULL
dadosLpg$id <- NULL
modelo_svm_lpg_v1 <- svm(STATUS ~ .,data = trainlpg,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_lpg_v1, testlpg)
mean(pred_test == testlpg$STATUS)
FPR(table(pred_test, testlpg$STATUS))
modelo_rf_lpg_v1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_lpg_v1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
modelo_nb_lpg_v1 <- naiveBayes(STATUS ~ ., data = trainlpg)
y_pred <- predict(modelo_nb_lpg_v1, newdata = testlpg)
mean(y_pred==testlpg$STATUS)
FPR(table(y_pred, testlpg$STATUS))
modelo_rf_lpg_v1.1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
modelo_rf_lpg_v1.1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .00005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
modelo_rf_lpg_v1.1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .00005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
dadosLpg$id <- 1:nrow(dadosLpg)
set.seed(1)
trainlpg <- dadosLpg %>% dplyr::sample_frac(0.7)
testlpg  <- dplyr::anti_join(dadosLpg, trainlpg, by = 'id')
trainlpg$id <- NULL
testlpg$id <- NULL
dadosLpg$id <- NULL
modelo_svm_lpg_v1 <- svm(STATUS ~ .,data = trainlpg,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_lpg_v1, testlpg)
mean(pred_test == testlpg$STATUS)
FPR(table(pred_test, testlpg$STATUS))
modelo_rf_lpg_v1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_lpg_v1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
modelo_nb_lpg_v1 <- naiveBayes(STATUS ~ ., data = trainlpg)
y_pred <- predict(modelo_nb_lpg_v1, newdata = testlpg)
mean(y_pred==testlpg$STATUS)
FPR(table(y_pred, testlpg$STATUS))
modelo_rf_lpg_v1.1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
modelo_rf_lpg_v1.1 = rpart(STATUS ~ ., data = trainlpg, control = rpart.control(cp = .00005))
tree_pred = predict(modelo_rf_lpg_v1.1, testlpg, type='class')
mean(tree_pred==testlpg$STATUS)
FPR(table(tree_pred, testlpg$STATUS))
#### SVM = (0.9237013 & 0.06508876) / RandomForest = (0.9366883 & 0.03846154) / NaiveBayes = (0.8522727 & 0.1893491)
table(dadosLpg$STATUS)
# Testarei equilibrando as classes preditoras
library(DMwR)
install.packages(DMwR)
install.packages("DMwR")
# Testarei equilibrando as classes preditoras
library(DMwR)
install.packages("DMwR")
install.packages("smotefamily")
# Testarei equilibrando as classes preditoras
library(smotefamily)
?smotefamily
# Testarei equilibrando as classes preditoras
?SMOTE
str(dadosLpg)
dadosBalanciadosLpg = SMOTE(dadosLpg[-6], dadosLpg[6])
# Testarei equilibrando as classes preditoras
?smote-n
?smote-n
# Testarei equilibrando as classes preditoras
?SMOTE
# Testarei equilibrando as classes preditoras
?smotefamily
#### SVM = (0.9237013 & 0.06508876) / RandomForest = (0.9366883 & 0.03846154) / NaiveBayes = (0.8522727 & 0.1893491)
table(dadosLpg$STATUS)
#### SVM = (0.9237013 & 0.06508876) / RandomForest = (0.9366883 & 0.03846154) / NaiveBayes = (0.8522727 & 0.1893491)
table(dadosLpg$STATUS)
dadosDesbalanciadosLpg = dadosLpg[dadosLpg$STATUS == "Falha",]
auxiliar = dadosLpg[dadosLpg$STATUS == "Sucesso",]
auxiliar <- auxiliar %>% dplyr::sample_frac(0.9)
dadosDesbalanciadosLpg = rbind(dadosDesbalanciadosLpg,auxiliar)
table(dadosDesbalanciadosLpg$STATUS)
dadosDesbalanciadosLpg = dadosLpg[dadosLpg$STATUS == "Falha",]
auxiliar = dadosLpg[dadosLpg$STATUS == "Sucesso",]
auxiliar <- auxiliar %>% dplyr::sample_frac(0.85)
dadosDesbalanciadosLpg = rbind(dadosDesbalanciadosLpg,auxiliar)
table(dadosDesbalanciadosLpg$STATUS)
dadosDesbalanciadosLpg = dadosLpg[dadosLpg$STATUS == "Falha",]
auxiliar = dadosLpg[dadosLpg$STATUS == "Sucesso",]
auxiliar <- auxiliar %>% dplyr::sample_frac(0.80)
dadosDesbalanciadosLpg = rbind(dadosDesbalanciadosLpg,auxiliar)
table(dadosDesbalanciadosLpg$STATUS)
dadosDesbalanciadosLpg = dadosLpg[dadosLpg$STATUS == "Falha",]
auxiliar = dadosLpg[dadosLpg$STATUS == "Sucesso",]
auxiliar <- auxiliar %>% dplyr::sample_frac(0.80)
dadosDesbalanciadosLpg = rbind(dadosDesbalanciadosLpg,auxiliar)
dadosDesbalanciadosLpg$id <- 1:nrow(dadosDesbalanciadosLpg)
set.seed(1)
train1.1 <- dadosDesbalanciadosLpg %>% dplyr::sample_frac(0.7)
test1.1  <- dplyr::anti_join(dadosDesbalanciadosLpg, train1.1, by = 'id')
train1.1$id <- NULL
test1.1$id <- NULL
modelo_svm_v1.1 <- svm(STATUS ~ .,data = train1.1,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.1, test1.1)
mean(pred_test == test1.1$STATUS)
FPR(table(pred_test, test1.1$STATUS))
modelo_rf_v1.1 = rpart(STATUS ~ ., data = train1.1, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.1, test1.1, type='class')
mean(tree_pred==test1.1$STATUS)
FPR(table(tree_pred, test1.1$STATUS))
table(dadosDesbalanciadosLpg$STATUS)
dadosLpg$id <- 1:nrow(dadosLpg)
set.seed(1)
train1.2 <- dadosLpg %>% dplyr::sample_frac(0.65)
test1.2 <- dplyr::anti_join(dadosLpg, train1.2, by = 'id')
train1.2$id <- NULL
test1.2$id <- NULL
modelo_svm_v1.2 <- svm(STATUS ~ .,data = train1.2,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.2, test1.2)
mean(pred_test == test1.2$STATUS)
FPR(table(pred_test, test1.2$STATUS))
modelo_rf_v1.2 = rpart(STATUS ~ ., data = train1.2, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.2, test1.2, type='class')
mean(tree_pred==test1.2$STATUS)
FPR(table(tree_pred, test1.2$STATUS))
set.seed(1)
train1.3 <- dadosLpg %>% dplyr::sample_frac(0.75)
test1.3 <- dplyr::anti_join(dadosLpg, train1.3, by = 'id')
train1.3$id <- NULL
test1.3$id <- NULL
modelo_svm_v1.3 <- svm(STATUS ~ .,data = train1.3,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.3, test1.3)
mean(pred_test == test1.3$STATUS)
FPR(table(pred_test, test1.3$STATUS))
modelo_rf_v1.3 = rpart(STATUS ~ ., data = train1.3, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.3, test1.3, type='class')
mean(tree_pred==test1.3$STATUS)
FPR(table(tree_pred, test1.3$STATUS))
set.seed(1)
train1.4 <- dadosLpg %>% dplyr::sample_frac(0.8)
test1.4 <- dplyr::anti_join(dadosLpg, train1.4, by = 'id')
train1.4$id <- NULL
test1.4$id <- NULL
modelo_svm_v1.4 <- svm(STATUS ~ .,data = train1.4,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.4, test1.4)
mean(pred_test == test1.4$STATUS)
FPR(table(pred_test, test1.4$STATUS))
modelo_rf_v1.4 = rpart(STATUS ~ ., data = train1.4, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.4, test1.4, type='class')
mean(tree_pred==test1.4$STATUS)
FPR(table(tree_pred, test1.4$STATUS))
set.seed(1)
train1.5 <- dadosLpg %>% dplyr::sample_frac(0.85)
test1.5 <- dplyr::anti_join(dadosLpg, train1.5, by = 'id')
train1.5$id <- NULL
test1.5$id <- NULL
modelo_svm_v1.5 <- svm(STATUS ~ .,data = train1.5,type = 'C-classification',kernel = 'radial')
pred_test <- predict(modelo_svm_v1.5, test1.5)
mean(pred_test == test1.5$STATUS)
FPR(table(pred_test, test1.5$STATUS))
modelo_rf_v1.5 = rpart(STATUS ~ ., data = train1.5, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1.5, test1.5, type='class')
mean(tree_pred==test1.5$STATUS)
FPR(table(tree_pred, test1.5$STATUS))
#### SVM = (0.9058442 & 0.07647059) / RandomForest = (0.9577922 & 0.05882353)
dadosLpg$id <- NULL
